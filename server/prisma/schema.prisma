// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String?
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  Purchase  Purchase[]
  address   Address[]
}

model Product {
  id                 String     @id @default(uuid())
  name               String     @unique
  picture            Images[]
  basePrice          Decimal
  discountPercentage Int        @default(0)
  stock              Int        @default(0)
  description        String?
  createdAt          DateTime   @default(now())
  category           Category   @relation(fields: [categoryName], references: [name])
  categoryName       String
  purchase           Purchase[]
}

model Purchase {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  totalPrice  Decimal
  purchasedAt DateTime  @default(now())
  address     Address   @relation(fields: [addressId], references: [id]) 
  addressId   String
  status     PurchaseStatus  @default(PENDING)
}



model Address {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  phone      String
  address    String
  district   String
  state      String
  landmark   String?
  altPhone   String?
  purchases  Purchase[]
}

model Images {
  publicId  String  @id
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

enum Role {
  USER
  ADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
}

